openapi: 3.0.0
info:
  description: Authentication service for Qwest platform
  title: Qwest Authentication API
  termsOfService: http://swagger.io/terms/
  contact:
    name: API Support
    url: http://www.swagger.io/support
    email: support@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"
paths:
  /healthcheck:
    get:
      description: Check if the API is running
      tags:
        - system
      summary: Health check
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /users/login:
    post:
      description: Authenticate a user with username and password
      tags:
        - auth
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dto.LoginRequest"
        description: Login credentials
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/envelope.Response"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/dto.LoginResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/envelope.Response"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/envelope.Response"
servers:
  - url: //localhost:15340
components:
  securitySchemes:
    BearerAuth:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    dto.LoginRequest:
      type: object
      properties:
        password:
          description: |-
            User's password
            @minLength 8
          type: string
          example: "********"
        username:
          description: |-
            Username must start with a letter and be 6-31 characters long
            @pattern ^[a-zA-Z]{1}[a-zA-Z0-9]{5,30}$
          type: string
          example: johndoe
    dto.LoginResponse:
      type: object
      properties:
        token:
          description: |-
            JWT token for authentication
            @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          type: string
    envelope.ErrorCode:
      type: string
      enum:
        - UNAUTHORIZED
        - FORBIDDEN
        - INVALID_TOKEN
        - TOKEN_EXPIRED
        - VALIDATION_ERROR
        - INVALID_INPUT
        - MALFORMED_JSON
        - NOT_FOUND
        - ALREADY_EXISTS
        - CONFLICT
        - BAD_REQUEST
        - DATABASE_ERROR
        - CONNECTION_ERROR
        - INTERNAL_ERROR
        - SERVICE_DOWN
        - TIMEOUT
        - INVALID_OPERATION
        - LIMIT_EXCEEDED
      x-enum-varnames:
        - ErrUnauthorized
        - ErrForbidden
        - ErrInvalidToken
        - ErrTokenExpired
        - ErrValidation
        - ErrInvalidInput
        - ErrMalformedJSON
        - ErrNotFound
        - ErrAlreadyExists
        - ErrConflict
        - ErrBadRequest
        - ErrDatabase
        - ErrConnection
        - ErrInternal
        - ErrServiceDown
        - ErrTimeout
        - ErrInvalidOperation
        - ErrLimitExceeded
    envelope.Meta:
      type: object
      additionalProperties: {}
    envelope.Pagination:
      type: object
      properties:
        page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
        total_pages:
          type: integer
    envelope.Response:
      type: object
      properties:
        data:
          description: Contains the response data
        error:
          description: Contains error details if Success is false
          allOf:
            - $ref: "#/components/schemas/envelope.ResponseError"
        meta:
          description: Additional metadata about the response
          allOf:
            - $ref: "#/components/schemas/envelope.Meta"
        pagination:
          description: Pagination information if applicable
          allOf:
            - $ref: "#/components/schemas/envelope.Pagination"
        success:
          description: Indicates if the request was successful
          type: boolean
          example: true
    envelope.ResponseError:
      type: object
      properties:
        code:
          description: |-
            Error code identifier
            @example INVALID_INPUT
          allOf:
            - $ref: "#/components/schemas/envelope.ErrorCode"
        fields:
          description: Field-specific validation errors
          type: object
          additionalProperties:
            type: string
        message:
          description: |-
            Human-readable error message
            @example Invalid input provided
          type: string
