// Package api Code generated by swaggo/swag. DO NOT EDIT
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/healthcheck": {
            "get": {
                "description": "Check if the API is running",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Authenticate a user with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/envelope.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.LoginResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/envelope.Response"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/envelope.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "User's password\n@minLength 8",
                    "type": "string",
                    "example": "********"
                },
                "username": {
                    "description": "Username must start with a letter and be 6-31 characters long\n@pattern ^[a-zA-Z]{1}[a-zA-Z0-9]{5,30}$",
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "dto.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "JWT token for authentication\n@example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "type": "string"
                }
            }
        },
        "envelope.ErrorCode": {
            "type": "string",
            "enum": [
                "UNAUTHORIZED",
                "FORBIDDEN",
                "INVALID_TOKEN",
                "TOKEN_EXPIRED",
                "VALIDATION_ERROR",
                "INVALID_INPUT",
                "MALFORMED_JSON",
                "NOT_FOUND",
                "ALREADY_EXISTS",
                "CONFLICT",
                "BAD_REQUEST",
                "DATABASE_ERROR",
                "CONNECTION_ERROR",
                "INTERNAL_ERROR",
                "SERVICE_DOWN",
                "TIMEOUT",
                "INVALID_OPERATION",
                "LIMIT_EXCEEDED"
            ],
            "x-enum-varnames": [
                "ErrUnauthorized",
                "ErrForbidden",
                "ErrInvalidToken",
                "ErrTokenExpired",
                "ErrValidation",
                "ErrInvalidInput",
                "ErrMalformedJSON",
                "ErrNotFound",
                "ErrAlreadyExists",
                "ErrConflict",
                "ErrBadRequest",
                "ErrDatabase",
                "ErrConnection",
                "ErrInternal",
                "ErrServiceDown",
                "ErrTimeout",
                "ErrInvalidOperation",
                "ErrLimitExceeded"
            ]
        },
        "envelope.Meta": {
            "type": "object",
            "additionalProperties": {}
        },
        "envelope.Pagination": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "envelope.Response": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Contains the response data"
                },
                "error": {
                    "description": "Contains error details if Success is false",
                    "allOf": [
                        {
                            "$ref": "#/definitions/envelope.ResponseError"
                        }
                    ]
                },
                "meta": {
                    "description": "Additional metadata about the response",
                    "allOf": [
                        {
                            "$ref": "#/definitions/envelope.Meta"
                        }
                    ]
                },
                "pagination": {
                    "description": "Pagination information if applicable",
                    "allOf": [
                        {
                            "$ref": "#/definitions/envelope.Pagination"
                        }
                    ]
                },
                "success": {
                    "description": "Indicates if the request was successful",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "envelope.ResponseError": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code identifier\n@example INVALID_INPUT",
                    "allOf": [
                        {
                            "$ref": "#/definitions/envelope.ErrorCode"
                        }
                    ]
                },
                "fields": {
                    "description": "Field-specific validation errors",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "description": "Human-readable error message\n@example Invalid input provided",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:15340",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Qwest Authentication API",
	Description:      "Authentication service for Qwest platform",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
